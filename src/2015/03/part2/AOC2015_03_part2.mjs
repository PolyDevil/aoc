// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Belt_MutableMap from "rescript/lib/es6/belt_MutableMap.js";
import * as Belt_MutableSetInt from "rescript/lib/es6/belt_MutableSetInt.js";

function cmp(a, b) {
  return a - b | 0;
}

var M = Belt_Id.MakeComparable({
      cmp: cmp
    });

function make(param) {
  var coords = {
    contents: [
      0,
      0
    ]
  };
  var move = function (s) {
    var match = coords.contents;
    var y = match[1];
    var x = match[0];
    var tmp;
    switch (s) {
      case "<" :
          tmp = [
            x - 1 | 0,
            y
          ];
          break;
      case ">" :
          tmp = [
            x + 1 | 0,
            y
          ];
          break;
      case "^" :
          tmp = [
            x,
            y + 1 | 0
          ];
          break;
      case "v" :
          tmp = [
            x,
            y - 1 | 0
          ];
          break;
      default:
        tmp = [
          x,
          y
        ];
    }
    coords.contents = tmp;
    return coords.contents;
  };
  var get = function (param) {
    return coords.contents;
  };
  return {
          get: get,
          move: move
        };
}

var Walker = {
  make: make
};

function make$1(s) {
  var alreadyVisited = 0;
  var santa = make(undefined);
  var roboSanta = make(undefined);
  var path = Belt_MutableMap.make(M);
  Belt_MutableMap.set(path, 0, Belt_MutableSetInt.fromArray([0]));
  for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
    var l = s[i];
    var match = i % 2 === 0 ? Curry._1(roboSanta.move, l) : Curry._1(santa.move, l);
    var y = match[1];
    var x = match[0];
    var v = Belt_MutableMap.get(path, x);
    if (v !== undefined) {
      var v$1 = Caml_option.valFromOption(v);
      if (Belt_MutableSetInt.has(v$1, y)) {
        alreadyVisited = alreadyVisited + 1 | 0;
      } else {
        Belt_MutableSetInt.add(v$1, y);
      }
    } else {
      Belt_MutableMap.set(path, x, Belt_MutableSetInt.fromArray([y]));
    }
  }
  return (s.length - alreadyVisited | 0) + 1 | 0;
}

var $$String;

var $$Map;

var SetInt;

export {
  $$String ,
  $$Map ,
  SetInt ,
  M ,
  Walker ,
  make$1 as make,
}
/* M Not a pure module */
