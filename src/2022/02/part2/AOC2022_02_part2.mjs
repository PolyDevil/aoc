// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "rescript/lib/es6/pervasives.js";

function toState(input) {
  switch (input) {
    case "A" :
        return /* Rock */0;
    case "B" :
        return /* Paper */1;
    case "C" :
        return /* Scissors */2;
    default:
      return Pervasives.failwith("incorrect value");
  }
}

function decode(s1, s2) {
  switch (s2) {
    case "X" :
        var match = toState(s1);
        var tmp;
        switch (match) {
          case /* Rock */0 :
              tmp = /* Scissors */2;
              break;
          case /* Paper */1 :
              tmp = /* Rock */0;
              break;
          case /* Scissors */2 :
              tmp = /* Paper */1;
              break;
          
        }
        return {
                TAG: /* Loss */2,
                _0: tmp
              };
    case "Y" :
        return {
                TAG: /* Draw */1,
                _0: toState(s1)
              };
    case "Z" :
        var match$1 = toState(s1);
        var tmp$1;
        switch (match$1) {
          case /* Rock */0 :
              tmp$1 = /* Paper */1;
              break;
          case /* Paper */1 :
              tmp$1 = /* Scissors */2;
              break;
          case /* Scissors */2 :
              tmp$1 = /* Rock */0;
              break;
          
        }
        return {
                TAG: /* Win */0,
                _0: tmp$1
              };
    default:
      return Pervasives.failwith("incorrect value");
  }
}

function score(state) {
  return state + 1 | 0;
}

function outcome(t) {
  switch (t.TAG | 0) {
    case /* Win */0 :
        return 6 + (t._0 + 1 | 0) | 0;
    case /* Draw */1 :
        return 3 + (t._0 + 1 | 0) | 0;
    case /* Loss */2 :
        return 0 + (t._0 + 1 | 0) | 0;
    
  }
}

function make(s1, s2) {
  return outcome(decode(s1, s2));
}

var Game = {
  toState: toState,
  decode: decode,
  score: score,
  outcome: outcome,
  make: make
};

function make$1(t) {
  return t.reduce((function (prev, param) {
                return prev + outcome(decode(param[0], param[1])) | 0;
              }), 0);
}

var $$Array;

export {
  $$Array ,
  Game ,
  make$1 as make,
}
/* No side effect */
